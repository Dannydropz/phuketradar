import OpenAI from "openai";
import { translate } from "@vitalets/google-translate-api";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface TranslationResult {
  translatedTitle: string;
  translatedContent: string;
  excerpt: string;
  category: string;
  isActualNews: boolean;
  author: string;
  embedding?: number[];
}

// Phuket location context map for richer rewrites
const PHUKET_CONTEXT_MAP: Record<string, string> = {
  "‡∏õ‡πà‡∏≤‡∏ï‡∏≠‡∏á": "Patong, a major tourist beach area on Phuket's west coast",
  "Patong": "Patong, a major tourist beach area on Phuket's west coast",
  "‡∏Å‡∏∞‡∏ï‡∏∞": "Kata, a family-friendly beach known for surfing",
  "Kata": "Kata, a family-friendly beach known for surfing",
  "‡∏£‡∏≤‡∏ß‡∏±‡∏¢": "Rawai, a local seafood area in southern Phuket",
  "Rawai": "Rawai, a local seafood area in southern Phuket",
  "‡∏Å‡∏°‡∏•‡∏≤": "Kamala, a quiet beach community north of Patong",
  "Kamala": "Kamala, a quiet beach community north of Patong",
  "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï": "Phuket Town, the island's cultural and administrative center",
  "Phuket Town": "Phuket Town, the island's cultural and administrative center",
  "‡∏â‡∏•‡∏≠‡∏á": "Chalong, a district known for the Big Buddha and pier area",
  "Chalong": "Chalong, a district known for the Big Buddha and pier area",
  "‡∏Å‡∏∞‡∏£‡∏ô": "Karon, a long beach popular with families and tourists",
  "Karon": "Karon, a long beach popular with families and tourists",
  "‡∏ö‡∏≤‡∏á‡πÄ‡∏ó‡∏≤": "Bang Tao, home to luxury resorts and Laguna Phuket",
  "Bang Tao": "Bang Tao, home to luxury resorts and Laguna Phuket",
  "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå": "Surin, an upscale beach area with fine dining",
  "Surin": "Surin, an upscale beach area with fine dining",
};

const THAI_FEMALE_AUTHORS = [
  "Ploy Srisawat",
  "Natcha Petcharat",
  "Siriporn Rattana",
  "Apinya Thongchai",
  "Kannika Jirasakul",
  "Ornuma Phongphan",
  "Wassana Choosuk",
];

function getRandomAuthor(): string {
  return THAI_FEMALE_AUTHORS[Math.floor(Math.random() * THAI_FEMALE_AUTHORS.length)];
}

// Detect if Thai text is complex and needs Google Translate first
function isComplexThaiText(thaiText: string): boolean {
  // Complex if:
  // - Longer than 400 characters
  // - Contains formal/government keywords
  const complexKeywords = ["‡πÅ‡∏ñ‡∏•‡∏á", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®", "‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á", "‡∏ô‡∏≤‡∏¢‡∏Å‡∏£‡∏±‡∏ê‡∏°‡∏ô‡∏ï‡∏£‡∏µ", "‡∏ú‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"];
  
  return (
    thaiText.length > 400 ||
    complexKeywords.some(keyword => thaiText.includes(keyword))
  );
}

// Enrich Thai text with Phuket location context
function enrichWithPhuketContext(text: string): string {
  let enrichedText = text;
  
  // Add context notes for known Phuket locations
  for (const [location, context] of Object.entries(PHUKET_CONTEXT_MAP)) {
    if (enrichedText.includes(location)) {
      // Add context as a note that the translator can use
      enrichedText = enrichedText.replace(
        new RegExp(location, 'g'),
        `${location} (${context})`
      );
    }
  }
  
  return enrichedText;
}

export class TranslatorService {
  async translateAndRewrite(
    title: string,
    content: string,
    precomputedEmbedding?: number[]
  ): Promise<TranslationResult> {
    try {
      // STEP 1: Enrich Thai text with Phuket context
      const enrichedTitle = enrichWithPhuketContext(title);
      const enrichedContent = enrichWithPhuketContext(content);
      
      // STEP 2: Determine translation strategy
      const isComplex = isComplexThaiText(enrichedContent);
      let sourceTextForGPT = `${enrichedTitle}\n\n${enrichedContent}`;
      
      // STEP 3: Pre-translate with Google Translate if complex
      if (isComplex) {
        try {
          console.log(`üåç Complex text detected (${enrichedContent.length} chars) - using Google Translate ‚Üí GPT-4o-mini pipeline`);
          const googleResult = await translate(sourceTextForGPT, { to: "en" });
          sourceTextForGPT = googleResult.text;
        } catch (googleError) {
          console.warn("‚ö†Ô∏è  Google Translate failed, falling back to direct GPT-4o-mini:", googleError);
          // Fall back to direct translation if Google Translate fails
        }
      } else {
        console.log(`‚ö° Simple text (${enrichedContent.length} chars) - using direct GPT-4o-mini translation`);
      }

      // STEP 4: Polish/rewrite with GPT-4o-mini
      const prompt = `You are a professional news editor for an English-language news site covering Phuket, Thailand. 

Your task:
1. Determine if this is actual NEWS content (not promotional posts, greetings, or filler content)
2. REJECT and mark as NOT news if the content is about:
   - The Thai royal family, monarchy, or king (sensitive political content)
   - "Phuket Times" or "Phuket Time News" itself (self-referential content about the news source)
3. If it's acceptable news, ${isComplex ? 'polish and rewrite the Google-translated text' : 'translate from Thai to English'} in a clear, professional news style

CONTEXT PRESERVATION:
- If you see location descriptions in parentheses (e.g., "Patong, a major tourist area"), preserve and incorporate them naturally
- Add brief contextual details about Phuket locations when relevant to help international readers
- Maintain all factual details, names, times, and numbers exactly as provided

GRAMMAR & STYLE REQUIREMENTS:
- Follow AP Style for headlines: capitalize main words, use title case
- ALWAYS include company suffixes: Co., Ltd., Inc., Corp., Plc., etc.
- Use proper articles (a, an, the) - never skip them
- Ensure subject-verb agreement and perfect grammar
- Write in active voice when possible
- Use specific numbers and dates, not vague terms
- Keep paragraphs concise and readable

HEADLINE EXAMPLES (Good):
‚úì "Thai Seaplane Co. Hosts Community Meeting in Phuket to Discuss Proposed Water Airport Project"
‚úì "Local Government Officials Announce New Tourism Initiative for Old Phuket Town"
‚úì "Patong Beach Vendors Face New Regulations Under City Cleanup Plan"

HEADLINE EXAMPLES (Bad):
‚úó "Thai Seaplane Hosts Community Meeting" (missing "Co.")
‚úó "government announce new initiative" (wrong capitalization, grammar)
‚úó "Beach vendors to face regulations" (passive voice)

4. Extract a concise excerpt (2-3 sentences) with perfect grammar
5. Categorize the article (Breaking, Tourism, Business, Events, or Other)

${isComplex ? 'Google-Translated Text' : 'Original Thai Text'}: ${sourceTextForGPT}

Respond in JSON format:
{
  "isActualNews": true/false,
  "translatedTitle": "clear, compelling English headline following AP Style with proper company names and context",
  "translatedContent": "professional news article in HTML format with <p> tags and <h2> for subheadings, perfect grammar, natural Phuket context",
  "excerpt": "2-3 sentence summary with flawless grammar and complete sentences",
  "category": "Breaking|Tourism|Business|Events|Other"
}

If this is NOT actual news (promotional content, greetings, ads, royal family content, or self-referential Phuket Times content), set isActualNews to false and leave other fields empty.`;

      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "You are a professional news editor and translator specializing in Thai to English translation for Phuket Radar, a news publication serving Phuket's international community.",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        temperature: 0.3, // Lower temperature for more consistent, factual output
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(completion.choices[0].message.content || "{}");

      // Use precomputed embedding (from Thai title) if provided
      // This ensures we always compare embeddings in the same language (Thai)
      const embedding = precomputedEmbedding;

      return {
        translatedTitle: result.translatedTitle || title,
        translatedContent: result.translatedContent || content,
        excerpt: result.excerpt || "",
        category: result.category || "Other",
        isActualNews: result.isActualNews || false,
        author: getRandomAuthor(),
        embedding,
      };
    } catch (error) {
      console.error("Error translating content:", error);
      throw new Error("Failed to translate content");
    }
  }

  async detectLanguage(text: string): Promise<string> {
    // Simple language detection - check for Thai characters
    const thaiPattern = /[\u0E00-\u0E7F]/;
    return thaiPattern.test(text) ? "th" : "en";
  }

  async generateEmbedding(text: string): Promise<number[]> {
    try {
      const response = await openai.embeddings.create({
        model: "text-embedding-3-small",
        input: text,
      });

      return response.data[0].embedding;
    } catch (error) {
      console.error("Error generating embedding:", error);
      throw new Error("Failed to generate embedding");
    }
  }

  async generateEmbeddingFromTitle(title: string): Promise<number[]> {
    // Generate embedding from the title for semantic duplicate detection
    return this.generateEmbedding(title);
  }

  async isRealPhoto(imageUrl: string): Promise<boolean> {
    try {
      // Decode HTML entities (&amp; -> &) for Facebook URLs
      const decodedUrl = imageUrl
        .replace(/&amp;/g, '&')
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&#039;/g, "'");
      
      const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "user",
            content: [
              {
                type: "text",
                text: `Is this image a real photograph/photo of actual people, places, events, or objects? 
                
Answer "yes" ONLY if it's a genuine photograph.
Answer "no" if it's:
- Text graphics (announcements with just text on colored backgrounds)
- Logos or branding images
- Illustrations or drawings
- Infographics
- Promotional graphics
- Memes or edited images with overlaid text

Return only a JSON object with format: {"isRealPhoto": true/false, "reason": "brief explanation"}`
              },
              {
                type: "image_url",
                image_url: {
                  url: decodedUrl,
                  detail: "low" // Use low detail to save costs
                }
              }
            ]
          }
        ],
        max_tokens: 100,
        temperature: 0.3,
        response_format: { type: "json_object" }
      });

      const result = JSON.parse(response.choices[0].message.content || "{}");
      console.log(`üñºÔ∏è  Image classification: ${result.isRealPhoto ? "REAL PHOTO ‚úì" : "TEXT GRAPHIC ‚úó"}`);
      console.log(`   Reason: ${result.reason}`);
      
      return result.isRealPhoto || false;
    } catch (error) {
      console.error("Error classifying image:", error);
      // On error, assume it's a real photo to avoid skipping valid content
      return true;
    }
  }
}

export const translatorService = new TranslatorService();
